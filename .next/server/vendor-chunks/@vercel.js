"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(ssr)/./node_modules/@vercel/analytics/dist/react/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@vercel/analytics/dist/react/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Analytics: () => (/* binding */ Analytics),\n/* harmony export */   track: () => (/* binding */ track)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Analytics,track auto */ // src/react.tsx\n\n// package.json\nvar name = \"@vercel/analytics\";\nvar version = \"1.1.1\";\n// src/queue.ts\nvar initQueue = ()=>{\n    if (window.va) return;\n    window.va = function a(...params) {\n        (window.vaq = window.vaq || []).push(params);\n    };\n};\n// src/utils.ts\nfunction isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\nfunction detectEnvironment() {\n    try {\n        const env = \"development\";\n        if (env === \"development\" || env === \"test\") {\n            return \"development\";\n        }\n    } catch (e) {}\n    return \"production\";\n}\nfunction setMode(mode = \"auto\") {\n    if (mode === \"auto\") {\n        window.vam = detectEnvironment();\n        return;\n    }\n    window.vam = mode;\n}\nfunction getMode() {\n    const mode = isBrowser() ? window.vam : detectEnvironment();\n    return mode || \"production\";\n}\nfunction isProduction() {\n    return getMode() === \"production\";\n}\nfunction isDevelopment() {\n    return getMode() === \"development\";\n}\nfunction removeKey(key, { [key]: _, ...rest }) {\n    return rest;\n}\nfunction parseProperties(properties, options) {\n    if (!properties) return void 0;\n    let props = properties;\n    const errorProperties = [];\n    for (const [key, value] of Object.entries(properties)){\n        if (typeof value === \"object\" && value !== null) {\n            if (options.strip) {\n                props = removeKey(key, props);\n            } else {\n                errorProperties.push(key);\n            }\n        }\n    }\n    if (errorProperties.length > 0 && !options.strip) {\n        throw Error(`The following properties are not valid: ${errorProperties.join(\", \")}. Only strings, numbers, booleans, and null are allowed.`);\n    }\n    return props;\n}\n// src/generic.ts\nfunction inject(props = {\n    debug: true\n}) {\n    var _a;\n    if (!isBrowser()) return;\n    setMode(props.mode);\n    initQueue();\n    if (props.beforeSend) {\n        (_a = window.va) == null ? void 0 : _a.call(window, \"beforeSend\", props.beforeSend);\n    }\n    const src = isDevelopment() ? \"https://va.vercel-scripts.com/v1/script.debug.js\" : \"/_vercel/insights/script.js\";\n    if (document.head.querySelector(`script[src*=\"${src}\"]`)) return;\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.defer = true;\n    script.setAttribute(\"data-sdkn\", name);\n    script.setAttribute(\"data-sdkv\", version);\n    script.onerror = ()=>{\n        const errorMessage = isDevelopment() ? \"Please check if any ad blockers are enabled and try again.\" : \"Be sure to enable Web Analytics for your project and deploy again. See https://vercel.com/docs/analytics/quickstart for more information.\";\n        console.log(`[Vercel Web Analytics] Failed to load script from ${src}. ${errorMessage}`);\n    };\n    if (isDevelopment() && props.debug === false) {\n        script.setAttribute(\"data-debug\", \"false\");\n    }\n    document.head.appendChild(script);\n}\nfunction track(name2, properties) {\n    var _a, _b;\n    if (!isBrowser()) {\n        const msg = \"[Vercel Web Analytics] Please import `track` from `@vercel/analytics/server` when using this function in a server environment\";\n        if (isProduction()) {\n            console.warn(msg);\n        } else {\n            throw new Error(msg);\n        }\n        return;\n    }\n    if (!properties) {\n        (_a = window.va) == null ? void 0 : _a.call(window, \"event\", {\n            name: name2\n        });\n        return;\n    }\n    try {\n        const props = parseProperties(properties, {\n            strip: isProduction()\n        });\n        (_b = window.va) == null ? void 0 : _b.call(window, \"event\", {\n            name: name2,\n            data: props\n        });\n    } catch (err) {\n        if (err instanceof Error && isDevelopment()) {\n            console.error(err);\n        }\n    }\n}\n// src/react.tsx\nfunction Analytics({ beforeSend, debug = true, mode = \"auto\" }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        inject({\n            beforeSend,\n            debug,\n            mode\n        });\n    }, [\n        beforeSend,\n        debug,\n        mode\n    ]);\n    return null;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9hbmFseXRpY3MvZGlzdC9yZWFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBCOztBQ0N4QixJQUFBQyxPQUFRO0FBQ1IsSUFBQUMsVUFBVzs7QUNGTixJQUFNQyxZQUFZO0lBRXZCLElBQUlDLE9BQU9DLEVBQUEsRUFBSTtJQUVmRCxPQUFPQyxFQUFBLEdBQUssU0FBU0MsRUFBQSxHQUFLQyxNQUFBO1FBQ3ZCSCxDQUFBQSxPQUFPSSxHQUFBLEdBQU1KLE9BQU9JLEdBQUEsSUFBTyxFQUFDLEVBQUdDLElBQUEsQ0FBS0Y7SUFDdkM7QUFDRjs7QUNMTyxTQUFTRztJQUNkLE9BQU8sZ0JBQWtCO0FBQzNCO0FBRUEsU0FBU0M7SUFDUCxJQUFJO1FBQ0YsTUFBTUM7UUFDTixJQUFJQSxRQUFRLGlCQUFpQkEsUUFBUSxRQUFRO1lBQzNDLE9BQU87UUFDVDtJQUNGLFNBQVNDLEdBQVAsQ0FFRjtJQUNBLE9BQU87QUFDVDtBQUVPLFNBQVNDLFFBQVFDLE9BQWE7SUFDbkMsSUFBSUEsU0FBUyxRQUFRO1FBQ25CWCxPQUFPWSxHQUFBLEdBQU1MO1FBQ2I7SUFDRjtJQUVBUCxPQUFPWSxHQUFBLEdBQU1EO0FBQ2Y7QUFFTyxTQUFTRTtJQUNkLE1BQU1GLE9BQU9MLGNBQWNOLE9BQU9ZLEdBQUEsR0FBTUw7SUFDeEMsT0FBT0ksUUFBUTtBQUNqQjtBQUVPLFNBQVNHO0lBQ2QsT0FBT0QsY0FBYztBQUN2QjtBQUVPLFNBQVNFO0lBQ2QsT0FBT0YsY0FBYztBQUN2QjtBQUVBLFNBQVNHLFVBQ1BDLEdBQUEsRUFDQSxFQUFFLENBQUNBLElBQUcsRUFBR0MsQ0FBQSxFQUFHLEdBQUdDLE1BQUs7SUFFcEIsT0FBT0E7QUFDVDtBQUVPLFNBQVNDLGdCQUNkQyxVQUFBLEVBQ0FDLE9BQUE7SUFJQSxJQUFJLENBQUNELFlBQVksT0FBTztJQUN4QixJQUFJRSxRQUFRRjtJQUNaLE1BQU1HLGtCQUE0QixFQUFDO0lBQ25D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YWNrOi8vY2hyaXMtY29ybmVyLy4uLy4uL3BhY2thZ2UuanNvbj82ZmM2Iiwid2VicGFjazovL2NocmlzLWNvcm5lci8uLi8uLi9zcmMvcXVldWUudHM/ODczZSIsIndlYnBhY2s6Ly9jaHJpcy1jb3JuZXIvLi4vLi4vc3JjL3V0aWxzLnRzPzYyNTIiLCJ3ZWJwYWNrOi8vY2hyaXMtY29ybmVyLy4uLy4uL3NyYy9nZW5lcmljLnRzPzBiZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5qZWN0LCB0cmFjayB9IGZyb20gJy4vZ2VuZXJpYyc7XG5pbXBvcnQgdHlwZSB7IEFuYWx5dGljc1Byb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogSW5qZWN0cyB0aGUgVmVyY2VsIFdlYiBBbmFseXRpY3Mgc2NyaXB0IGludG8gdGhlIHBhZ2UgaGVhZCBhbmQgc3RhcnRzIHRyYWNraW5nIHBhZ2Ugdmlld3MuIFJlYWQgbW9yZSBpbiBvdXIgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vdmVyY2VsLmNvbS9kb2NzL2NvbmNlcHRzL2FuYWx5dGljcy9wYWNrYWdlKS5cbiAqIEBwYXJhbSBbcHJvcHNdIC0gQW5hbHl0aWNzIG9wdGlvbnMuXG4gKiBAcGFyYW0gW3Byb3BzLm1vZGVdIC0gVGhlIG1vZGUgdG8gdXNlIGZvciB0aGUgYW5hbHl0aWNzIHNjcmlwdC4gRGVmYXVsdHMgdG8gYGF1dG9gLlxuICogIC0gYGF1dG9gIC0gQXV0b21hdGljYWxseSBkZXRlY3QgdGhlIGVudmlyb25tZW50LiAgVXNlcyBgcHJvZHVjdGlvbmAgaWYgdGhlIGVudmlyb25tZW50IGNhbm5vdCBiZSBkZXRlcm1pbmVkLlxuICogIC0gYHByb2R1Y3Rpb25gIC0gQWx3YXlzIHVzZSB0aGUgcHJvZHVjdGlvbiBzY3JpcHQuIChTZW5kcyBldmVudHMgdG8gdGhlIHNlcnZlcilcbiAqICAtIGBkZXZlbG9wbWVudGAgLSBBbHdheXMgdXNlIHRoZSBkZXZlbG9wbWVudCBzY3JpcHQuIChMb2dzIGV2ZW50cyB0byB0aGUgY29uc29sZSlcbiAqIEBwYXJhbSBbcHJvcHMuZGVidWddIC0gV2hldGhlciB0byBlbmFibGUgZGVidWcgbG9nZ2luZyBpbiBkZXZlbG9wbWVudC4gRGVmYXVsdHMgdG8gYHRydWVgLlxuICogQHBhcmFtIFtwcm9wcy5iZWZvcmVTZW5kXSAtIEEgbWlkZGxld2FyZSBmdW5jdGlvbiB0byBtb2RpZnkgZXZlbnRzIGJlZm9yZSB0aGV5IGFyZSBzZW50LiBTaG91bGQgcmV0dXJuIHRoZSBldmVudCBvYmplY3Qgb3IgYG51bGxgIHRvIGNhbmNlbCB0aGUgZXZlbnQuXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJ0B2ZXJjZWwvYW5hbHl0aWNzL3JlYWN0JztcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgcmV0dXJuIChcbiAqICAgPGRpdj5cbiAqICAgIDxBbmFseXRpY3MgLz5cbiAqICAgIDxoMT5NeSBBcHA8L2gxPlxuICogIDwvZGl2PlxuICogKTtcbiAqIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBBbmFseXRpY3Moe1xuICBiZWZvcmVTZW5kLFxuICBkZWJ1ZyA9IHRydWUsXG4gIG1vZGUgPSAnYXV0bycsXG59OiBBbmFseXRpY3NQcm9wcyk6IG51bGwge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGluamVjdCh7IGJlZm9yZVNlbmQsIGRlYnVnLCBtb2RlIH0pO1xuICB9LCBbYmVmb3JlU2VuZCwgZGVidWcsIG1vZGVdKTtcblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgdHJhY2ssIEFuYWx5dGljcyB9O1xuZXhwb3J0IHR5cGUgeyBBbmFseXRpY3NQcm9wcyB9O1xuIiwie1xuICBcIm5hbWVcIjogXCJAdmVyY2VsL2FuYWx5dGljc1wiLFxuICBcInZlcnNpb25cIjogXCIxLjEuMVwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiR2FpbiByZWFsLXRpbWUgdHJhZmZpYyBpbnNpZ2h0cyB3aXRoIFZlcmNlbCBXZWIgQW5hbHl0aWNzXCIsXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiYW5hbHl0aWNzXCIsXG4gICAgXCJ2ZXJjZWxcIlxuICBdLFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidXJsXCI6IFwiZ2l0aHViOnZlcmNlbC9hbmFseXRpY3NcIixcbiAgICBcImRpcmVjdG9yeVwiOiBcInBhY2thZ2VzL3dlYlwiXG4gIH0sXG4gIFwibGljZW5zZVwiOiBcIk1QTC0yLjBcIixcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG4gICAgXCIuXCI6IHtcbiAgICAgIFwiYnJvd3NlclwiOiBcIi4vZGlzdC9pbmRleC5qc1wiLFxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbmRleC5janNcIlxuICAgIH0sXG4gICAgXCIuL3JlYWN0XCI6IHtcbiAgICAgIFwiYnJvd3NlclwiOiBcIi4vZGlzdC9yZWFjdC9pbmRleC5qc1wiLFxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvcmVhY3QvaW5kZXguanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9yZWFjdC9pbmRleC5janNcIlxuICAgIH0sXG4gICAgXCIuL3NlcnZlclwiOiB7XG4gICAgICBcIm5vZGVcIjogXCIuL2Rpc3Qvc2VydmVyL2luZGV4LmpzXCIsXG4gICAgICBcImVkZ2UtbGlnaHRcIjogXCIuL2Rpc3Qvc2VydmVyL2luZGV4LmpzXCIsXG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9zZXJ2ZXIvaW5kZXguanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9zZXJ2ZXIvaW5kZXguY2pzXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2Rpc3Qvc2VydmVyL2luZGV4LmNqc1wiXG4gICAgfVxuICB9LFxuICBcIm1haW5cIjogXCJkaXN0L2luZGV4LmpzXCIsXG4gIFwidHlwZXNcIjogXCJkaXN0L2luZGV4LmQudHNcIixcbiAgXCJ0eXBlc1ZlcnNpb25zXCI6IHtcbiAgICBcIipcIjoge1xuICAgICAgXCIqXCI6IFtcbiAgICAgICAgXCJkaXN0L2luZGV4LmQudHNcIlxuICAgICAgXSxcbiAgICAgIFwicmVhY3RcIjogW1xuICAgICAgICBcImRpc3QvcmVhY3QvaW5kZXguZC50c1wiXG4gICAgICBdLFxuICAgICAgXCJzZXJ2ZXJcIjogW1xuICAgICAgICBcImRpc3Qvc2VydmVyL2luZGV4LmQudHNcIlxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwidHN1cFwiLFxuICAgIFwiZGV2XCI6IFwidHN1cCAtLXdhdGNoXCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IC5cIixcbiAgICBcImxpbnQtZml4XCI6IFwiZXNsaW50IC4gLS1maXhcIixcbiAgICBcInRlc3RcIjogXCJqZXN0XCIsXG4gICAgXCJ0eXBlLWNoZWNrXCI6IFwidHNjIC0tbm9FbWl0XCJcbiAgfSxcbiAgXCJlc2xpbnRDb25maWdcIjoge1xuICAgIFwiZXh0ZW5kc1wiOiBbXG4gICAgICBcIkB2ZXJjZWwvZXNsaW50LWNvbmZpZ1wiXG4gICAgXSxcbiAgICBcInJ1bGVzXCI6IHtcbiAgICAgIFwidHNkb2Mvc3ludGF4XCI6IFwib2ZmXCJcbiAgICB9LFxuICAgIFwiaWdub3JlUGF0dGVybnNcIjogW1xuICAgICAgXCJqZXN0LnNldHVwLnRzXCJcbiAgICBdXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcInNlcnZlci1vbmx5XCI6IFwiXjAuMC4xXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHN3Yy9jb3JlXCI6IFwiXjEuMy42NlwiLFxuICAgIFwiQHN3Yy9qZXN0XCI6IFwiXjAuMi4yNlwiLFxuICAgIFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbVwiOiBcIl41LjE2LjVcIixcbiAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjogXCJeMTQuMC4wXCIsXG4gICAgXCJAdHlwZXMvamVzdFwiOiBcIl4yOS41LjJcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIwLjMuMVwiLFxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuMTRcIixcbiAgICBcIkB0eXBlcy90ZXN0aW5nLWxpYnJhcnlfX2plc3QtZG9tXCI6IFwiXjUuMTQuNlwiLFxuICAgIFwiQHZlcmNlbC9lc2xpbnQtY29uZmlnXCI6IFwid29ya3NwYWNlOjAuMC4wXCIsXG4gICAgXCJqZXN0XCI6IFwiXjI5LjUuMFwiLFxuICAgIFwiamVzdC1lbnZpcm9ubWVudC1qc2RvbVwiOiBcIl4yOS41LjBcIixcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIFwidHN1cFwiOiBcIjcuMS4wXCJcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGluaXRRdWV1ZSA9ICgpOiB2b2lkID0+IHtcbiAgLy8gaW5pdGlhbGl6ZSB2YSB1bnRpbCBzY3JpcHQgaXMgbG9hZGVkXG4gIGlmICh3aW5kb3cudmEpIHJldHVybjtcblxuICB3aW5kb3cudmEgPSBmdW5jdGlvbiBhKC4uLnBhcmFtcyk6IHZvaWQge1xuICAgICh3aW5kb3cudmFxID0gd2luZG93LnZhcSB8fCBbXSkucHVzaChwYXJhbXMpO1xuICB9O1xufTtcbiIsImltcG9ydCB0eXBlIHsgQWxsb3dlZFByb3BlcnR5VmFsdWVzLCBNb2RlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gZGV0ZWN0RW52aXJvbm1lbnQoKTogJ2RldmVsb3BtZW50JyB8ICdwcm9kdWN0aW9uJyB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgaWYgKGVudiA9PT0gJ2RldmVsb3BtZW50JyB8fCBlbnYgPT09ICd0ZXN0Jykge1xuICAgICAgcmV0dXJuICdkZXZlbG9wbWVudCc7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gZG8gbm90aGluZywgdGhpcyBpcyBva2F5XG4gIH1cbiAgcmV0dXJuICdwcm9kdWN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1vZGUobW9kZTogTW9kZSA9ICdhdXRvJyk6IHZvaWQge1xuICBpZiAobW9kZSA9PT0gJ2F1dG8nKSB7XG4gICAgd2luZG93LnZhbSA9IGRldGVjdEVudmlyb25tZW50KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2luZG93LnZhbSA9IG1vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlKCk6IE1vZGUge1xuICBjb25zdCBtb2RlID0gaXNCcm93c2VyKCkgPyB3aW5kb3cudmFtIDogZGV0ZWN0RW52aXJvbm1lbnQoKTtcbiAgcmV0dXJuIG1vZGUgfHwgJ3Byb2R1Y3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9kdWN0aW9uKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZ2V0TW9kZSgpID09PSAncHJvZHVjdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RldmVsb3BtZW50KCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZ2V0TW9kZSgpID09PSAnZGV2ZWxvcG1lbnQnO1xufVxuXG5mdW5jdGlvbiByZW1vdmVLZXkoXG4gIGtleTogc3RyaW5nLFxuICB7IFtrZXldOiBfLCAuLi5yZXN0IH1cbik6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmV0dXJuIHJlc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVByb3BlcnRpZXMoXG4gIHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5kZWZpbmVkLFxuICBvcHRpb25zOiB7XG4gICAgc3RyaXA/OiBib29sZWFuO1xuICB9XG4pOiBFcnJvciB8IFJlY29yZDxzdHJpbmcsIEFsbG93ZWRQcm9wZXJ0eVZhbHVlcz4gfCB1bmRlZmluZWQge1xuICBpZiAoIXByb3BlcnRpZXMpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBwcm9wcyA9IHByb3BlcnRpZXM7XG4gIGNvbnN0IGVycm9yUHJvcGVydGllczogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuc3RyaXApIHtcbiAgICAgICAgcHJvcHMgPSByZW1vdmVLZXkoa2V5LCBwcm9wcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvclByb3BlcnRpZXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChlcnJvclByb3BlcnRpZXMubGVuZ3RoID4gMCAmJiAhb3B0aW9ucy5zdHJpcCkge1xuICAgIHRocm93IEVycm9yKFxuICAgICAgYFRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHZhbGlkOiAke2Vycm9yUHJvcGVydGllcy5qb2luKFxuICAgICAgICAnLCAnXG4gICAgICApfS4gT25seSBzdHJpbmdzLCBudW1iZXJzLCBib29sZWFucywgYW5kIG51bGwgYXJlIGFsbG93ZWQuYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHByb3BzIGFzIFJlY29yZDxzdHJpbmcsIEFsbG93ZWRQcm9wZXJ0eVZhbHVlcz47XG59XG4iLCJpbXBvcnQgeyBuYW1lIGFzIHBhY2thZ2VOYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IGluaXRRdWV1ZSB9IGZyb20gJy4vcXVldWUnO1xuaW1wb3J0IHR5cGUgeyBBbGxvd2VkUHJvcGVydHlWYWx1ZXMsIEFuYWx5dGljc1Byb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBpc0Jyb3dzZXIsXG4gIHBhcnNlUHJvcGVydGllcyxcbiAgc2V0TW9kZSxcbiAgaXNEZXZlbG9wbWVudCxcbiAgaXNQcm9kdWN0aW9uLFxufSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBJbmplY3RzIHRoZSBWZXJjZWwgV2ViIEFuYWx5dGljcyBzY3JpcHQgaW50byB0aGUgcGFnZSBoZWFkIGFuZCBzdGFydHMgdHJhY2tpbmcgcGFnZSB2aWV3cy4gUmVhZCBtb3JlIGluIG91ciBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly92ZXJjZWwuY29tL2RvY3MvY29uY2VwdHMvYW5hbHl0aWNzL3BhY2thZ2UpLlxuICogQHBhcmFtIFtwcm9wc10gLSBBbmFseXRpY3Mgb3B0aW9ucy5cbiAqIEBwYXJhbSBbcHJvcHMubW9kZV0gLSBUaGUgbW9kZSB0byB1c2UgZm9yIHRoZSBhbmFseXRpY3Mgc2NyaXB0LiBEZWZhdWx0cyB0byBgYXV0b2AuXG4gKiAgLSBgYXV0b2AgLSBBdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgZW52aXJvbm1lbnQuICBVc2VzIGBwcm9kdWN0aW9uYCBpZiB0aGUgZW52aXJvbm1lbnQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKiAgLSBgcHJvZHVjdGlvbmAgLSBBbHdheXMgdXNlIHRoZSBwcm9kdWN0aW9uIHNjcmlwdC4gKFNlbmRzIGV2ZW50cyB0byB0aGUgc2VydmVyKVxuICogIC0gYGRldmVsb3BtZW50YCAtIEFsd2F5cyB1c2UgdGhlIGRldmVsb3BtZW50IHNjcmlwdC4gKExvZ3MgZXZlbnRzIHRvIHRoZSBjb25zb2xlKVxuICogQHBhcmFtIFtwcm9wcy5kZWJ1Z10gLSBXaGV0aGVyIHRvIGVuYWJsZSBkZWJ1ZyBsb2dnaW5nIGluIGRldmVsb3BtZW50LiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gKiBAcGFyYW0gW3Byb3BzLmJlZm9yZVNlbmRdIC0gQSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRvIG1vZGlmeSBldmVudHMgYmVmb3JlIHRoZXkgYXJlIHNlbnQuIFNob3VsZCByZXR1cm4gdGhlIGV2ZW50IG9iamVjdCBvciBgbnVsbGAgdG8gY2FuY2VsIHRoZSBldmVudC5cbiAqL1xuZnVuY3Rpb24gaW5qZWN0KFxuICBwcm9wczogQW5hbHl0aWNzUHJvcHMgPSB7XG4gICAgZGVidWc6IHRydWUsXG4gIH1cbik6IHZvaWQge1xuICBpZiAoIWlzQnJvd3NlcigpKSByZXR1cm47XG5cbiAgc2V0TW9kZShwcm9wcy5tb2RlKTtcblxuICBpbml0UXVldWUoKTtcblxuICBpZiAocHJvcHMuYmVmb3JlU2VuZCkge1xuICAgIHdpbmRvdy52YT8uKCdiZWZvcmVTZW5kJywgcHJvcHMuYmVmb3JlU2VuZCk7XG4gIH1cblxuICBjb25zdCBzcmMgPSBpc0RldmVsb3BtZW50KClcbiAgICA/ICdodHRwczovL3ZhLnZlcmNlbC1zY3JpcHRzLmNvbS92MS9zY3JpcHQuZGVidWcuanMnXG4gICAgOiAnL192ZXJjZWwvaW5zaWdodHMvc2NyaXB0LmpzJztcblxuICBpZiAoZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjKj1cIiR7c3JjfVwiXWApKSByZXR1cm47XG5cbiAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHNjcmlwdC5zcmMgPSBzcmM7XG4gIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2RrbicsIHBhY2thZ2VOYW1lKTtcbiAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1zZGt2JywgdmVyc2lvbik7XG5cbiAgc2NyaXB0Lm9uZXJyb3IgPSAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gaXNEZXZlbG9wbWVudCgpXG4gICAgICA/ICdQbGVhc2UgY2hlY2sgaWYgYW55IGFkIGJsb2NrZXJzIGFyZSBlbmFibGVkIGFuZCB0cnkgYWdhaW4uJ1xuICAgICAgOiAnQmUgc3VyZSB0byBlbmFibGUgV2ViIEFuYWx5dGljcyBmb3IgeW91ciBwcm9qZWN0IGFuZCBkZXBsb3kgYWdhaW4uIFNlZSBodHRwczovL3ZlcmNlbC5jb20vZG9jcy9hbmFseXRpY3MvcXVpY2tzdGFydCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUgLS0gTG9nZ2luZyB0byBjb25zb2xlIGlzIGludGVudGlvbmFsXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW1ZlcmNlbCBXZWIgQW5hbHl0aWNzXSBGYWlsZWQgdG8gbG9hZCBzY3JpcHQgZnJvbSAke3NyY30uICR7ZXJyb3JNZXNzYWdlfWBcbiAgICApO1xuICB9O1xuXG4gIGlmIChpc0RldmVsb3BtZW50KCkgJiYgcHJvcHMuZGVidWcgPT09IGZhbHNlKSB7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1kZWJ1ZycsICdmYWxzZScpO1xuICB9XG5cbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufVxuXG4vKipcbiAqIFRyYWNrcyBhIGN1c3RvbSBldmVudC4gUGxlYXNlIHJlZmVyIHRvIHRoZSBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly92ZXJjZWwuY29tL2RvY3MvY29uY2VwdHMvYW5hbHl0aWNzL2N1c3RvbS1ldmVudHMpIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGN1c3RvbSBldmVudHMuXG4gKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAqICogRXhhbXBsZXM6IGBQdXJjaGFzZWAsIGBDbGljayBCdXR0b25gLCBvciBgUGxheSBWaWRlb2AuXG4gKiBAcGFyYW0gW3Byb3BlcnRpZXNdIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG9mIHRoZSBldmVudC4gTmVzdGVkIG9iamVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQuIEFsbG93ZWQgdmFsdWVzIGFyZSBgc3RyaW5nYCwgYG51bWJlcmAsIGBib29sZWFuYCwgYW5kIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gdHJhY2soXG4gIG5hbWU6IHN0cmluZyxcbiAgcHJvcGVydGllcz86IFJlY29yZDxzdHJpbmcsIEFsbG93ZWRQcm9wZXJ0eVZhbHVlcz5cbik6IHZvaWQge1xuICBpZiAoIWlzQnJvd3NlcigpKSB7XG4gICAgY29uc3QgbXNnID1cbiAgICAgICdbVmVyY2VsIFdlYiBBbmFseXRpY3NdIFBsZWFzZSBpbXBvcnQgYHRyYWNrYCBmcm9tIGBAdmVyY2VsL2FuYWx5dGljcy9zZXJ2ZXJgIHdoZW4gdXNpbmcgdGhpcyBmdW5jdGlvbiBpbiBhIHNlcnZlciBlbnZpcm9ubWVudCc7XG5cbiAgICBpZiAoaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlIC0tIFNob3cgd2FybmluZyBpbiBwcm9kdWN0aW9uXG4gICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFwcm9wZXJ0aWVzKSB7XG4gICAgd2luZG93LnZhPy4oJ2V2ZW50JywgeyBuYW1lIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcHJvcHMgPSBwYXJzZVByb3BlcnRpZXMocHJvcGVydGllcywge1xuICAgICAgc3RyaXA6IGlzUHJvZHVjdGlvbigpLFxuICAgIH0pO1xuXG4gICAgd2luZG93LnZhPy4oJ2V2ZW50Jywge1xuICAgICAgbmFtZSxcbiAgICAgIGRhdGE6IHByb3BzLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IgJiYgaXNEZXZlbG9wbWVudCgpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZSAtLSBMb2dnaW5nIHRvIGNvbnNvbGUgaXMgaW50ZW50aW9uYWxcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgaW5qZWN0LCB0cmFjayB9O1xuZXhwb3J0IHR5cGUgeyBBbmFseXRpY3NQcm9wcyB9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0IC0tIERlZmF1bHQgZXhwb3J0IGlzIGludGVudGlvbmFsXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluamVjdCxcbiAgdHJhY2ssXG59O1xuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsIm5hbWUiLCJ2ZXJzaW9uIiwiaW5pdFF1ZXVlIiwid2luZG93IiwidmEiLCJhIiwicGFyYW1zIiwidmFxIiwicHVzaCIsImlzQnJvd3NlciIsImRldGVjdEVudmlyb25tZW50IiwiZW52IiwiZSIsInNldE1vZGUiLCJtb2RlIiwidmFtIiwiZ2V0TW9kZSIsImlzUHJvZHVjdGlvbiIsImlzRGV2ZWxvcG1lbnQiLCJyZW1vdmVLZXkiLCJrZXkiLCJfIiwicmVzdCIsInBhcnNlUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJvcHRpb25zIiwicHJvcHMiLCJlcnJvclByb3BlcnRpZXMiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJzdHJpcCIsImxlbmd0aCIsIkVycm9yIiwiam9pbiIsImluamVjdCIsImRlYnVnIiwiX2EiLCJiZWZvcmVTZW5kIiwiY2FsbCIsInNyYyIsImRvY3VtZW50IiwiaGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiZGVmZXIiLCJzZXRBdHRyaWJ1dGUiLCJvbmVycm9yIiwiZXJyb3JNZXNzYWdlIiwiY29uc29sZSIsImxvZyIsImFwcGVuZENoaWxkIiwidHJhY2siLCJfYiIsIm1zZyIsIndhcm4iLCJkYXRhIiwiZXJyIiwiZXJyb3IiLCJBbmFseXRpY3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vercel/analytics/dist/react/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vercel/speed-insights/dist/next/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@vercel/speed-insights/dist/next/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpeedInsights: () => (/* binding */ SpeedInsights2)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* __next_internal_client_entry_do_not_use__ SpeedInsights auto */ // src/nextjs/index.tsx\n\n// src/react/index.tsx\n\n// package.json\nvar name = \"@vercel/speed-insights\";\nvar version = \"1.0.3\";\n// src/queue.ts\nvar initQueue = ()=>{\n    if (window.si) return;\n    window.si = function a(...params) {\n        (window.siq = window.siq || []).push(params);\n    };\n};\n// src/utils.ts\nfunction isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\nfunction detectEnvironment() {\n    try {\n        const env = \"development\";\n        if (env === \"development\" || env === \"test\") {\n            return \"development\";\n        }\n    } catch (e) {}\n    return \"production\";\n}\nfunction isDevelopment() {\n    return detectEnvironment() === \"development\";\n}\nfunction computeRoute(pathname, pathParams) {\n    if (!pathname || !pathParams) {\n        return pathname;\n    }\n    let result = pathname;\n    try {\n        for (const [key, valueOrArray] of Object.entries(pathParams)){\n            const isValueArray = Array.isArray(valueOrArray);\n            const value = isValueArray ? valueOrArray.join(\"/\") : valueOrArray;\n            const expr = isValueArray ? `...${key}` : key;\n            const matcher = new RegExp(`/${escapeRegExp(value)}(?=[/?#]|$)`);\n            if (matcher.test(result)) {\n                result = result.replace(matcher, `/[${expr}]`);\n            }\n        }\n        return result;\n    } catch (e) {\n        return pathname;\n    }\n}\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n// src/generic.ts\nvar SCRIPT_URL = `https://va.vercel-scripts.com/v1/speed-insights`;\nvar PROD_SCRIPT_URL = `${SCRIPT_URL}/script.js`;\nvar DEV_SCRIPT_URL = `${SCRIPT_URL}/script.debug.js`;\nvar PROXY_SCRIPT_URL = `/_vercel/speed-insights/script.js`;\nfunction injectSpeedInsights(props = {}) {\n    var _a;\n    if (!isBrowser() || props.route === null) return null;\n    initQueue();\n    const isSelfHosted = Boolean(props.dsn);\n    const productionScript = isSelfHosted ? PROD_SCRIPT_URL : PROXY_SCRIPT_URL;\n    const src = props.scriptSrc || (isDevelopment() ? DEV_SCRIPT_URL : productionScript);\n    if (document.head.querySelector(`script[src*=\"${src}\"]`)) return null;\n    if (props.beforeSend) {\n        (_a = window.si) == null ? void 0 : _a.call(window, \"beforeSend\", props.beforeSend);\n    }\n    const script = document.createElement(\"script\");\n    script.src = src;\n    script.defer = true;\n    script.dataset.sdkn = name + (props.framework ? `/${props.framework}` : \"\");\n    script.dataset.sdkv = version;\n    if (props.sampleRate) {\n        script.dataset.sampleRate = props.sampleRate.toString();\n    }\n    if (props.route) {\n        script.dataset.route = props.route;\n    }\n    if (props.endpoint) {\n        script.dataset.endpoint = props.endpoint;\n    }\n    if (props.dsn) {\n        script.dataset.dsn = props.dsn;\n    }\n    if (isDevelopment() && props.debug === false) {\n        script.dataset.debug = \"false\";\n    }\n    script.onerror = ()=>{\n        console.log(`[Vercel Speed Insights] Failed to load script from ${src}. Please check if any content blockers are enabled and try again.`);\n    };\n    document.head.appendChild(script);\n    return {\n        setRoute: (route)=>{\n            script.dataset.route = route ?? void 0;\n        }\n    };\n}\n// src/react/index.tsx\nfunction SpeedInsights(props) {\n    const setScriptRoute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!setScriptRoute.current) {\n            const script = injectSpeedInsights({\n                framework: props.framework || \"react\",\n                ...props\n            });\n            if (script) {\n                setScriptRoute.current = script.setRoute;\n            }\n        } else if (props.route) {\n            setScriptRoute.current(props.route);\n        }\n    }, [\n        props.route\n    ]);\n    return null;\n}\n// src/nextjs/utils.ts\n\n\nvar useRoute = ()=>{\n    const params = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_1__.useParams)();\n    const searchParams = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_1__.useSearchParams)();\n    const path = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_1__.usePathname)();\n    const finalParams = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!params) return null;\n        if (Object.keys(params).length !== 0) {\n            return params;\n        }\n        return {\n            ...Object.fromEntries(searchParams.entries())\n        };\n    }, [\n        params,\n        searchParams\n    ]);\n    return computeRoute(path, finalParams);\n};\n// src/nextjs/index.tsx\nfunction SpeedInsightsComponent(props) {\n    const route = useRoute();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpeedInsights, {\n        route,\n        ...props,\n        framework: \"next\"\n    });\n}\nfunction SpeedInsights2(props) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: null\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpeedInsightsComponent, {\n        ...props\n    }));\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vercel/speed-insights/dist/next/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/analytics/dist/react/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@vercel/analytics/dist/react/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Analytics: () => (/* binding */ e0),
/* harmony export */   track: () => (/* binding */ e1)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/christophergu/chris-corner/node_modules/@vercel/analytics/dist/react/index.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/christophergu/chris-corner/node_modules/@vercel/analytics/dist/react/index.js#Analytics`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/christophergu/chris-corner/node_modules/@vercel/analytics/dist/react/index.js#track`);


/***/ }),

/***/ "(rsc)/./node_modules/@vercel/speed-insights/dist/next/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@vercel/speed-insights/dist/next/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpeedInsights: () => (/* binding */ e0)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/christophergu/chris-corner/node_modules/@vercel/speed-insights/dist/next/index.mjs`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/christophergu/chris-corner/node_modules/@vercel/speed-insights/dist/next/index.mjs#SpeedInsights`);


/***/ })

};
;